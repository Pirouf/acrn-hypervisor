From: Helmut Buchsbaum <helmut.buchsbaum@opensource.tttech-industrial.com>
Date: Tue, 29 Sep 2020 09:25:31 +0200
Subject: acrn-config: remove dependencies on HV console

acrn-config creates dependencies between the HV console and the VUART
settings of the VMs, especially the SOS VM. This is not correct since
the HV console denotes a physical serial port wheres all VMUARTS are
purely virtual and thus local to each VM. These settings are created by
defining macros like [SOS_]COM*_[BASE|IRQ] and using them for creating
misc_cfg.h which then is used in vm_configurations.c.

When using /dev/ttyS1 for HV console, this calculates wrong SOS_COM*_BASE
macros (identical values for SOS_COM1_BASE and SOS_COM2_BASE) which makes
VMUART VM-communication fail.

So just provide a fixed VUART setting for SOS instead of a complicated
calculation based on a physical UARTs.

Signed-off-by: Helmut Buchsbaum <helmut.buchsbaum@opensource.tttech-industrial.com>
---
 misc/config_tools/library/scenario_cfg_lib.py | 80 +--------------------------
 1 file changed, 3 insertions(+), 77 deletions(-)

diff --git a/misc/config_tools/library/scenario_cfg_lib.py b/misc/config_tools/library/scenario_cfg_lib.py
index ca60906..507934e 100644
--- a/misc/config_tools/library/scenario_cfg_lib.py
+++ b/misc/config_tools/library/scenario_cfg_lib.py
@@ -1250,87 +1250,13 @@ def check_pt_intx(phys_gsi, virt_gsi):
             return
 
 
-def get_valid_ttys_for_sos_vuart(ttys_n):
-    """
-    Get available ttysn list for vuart0/vuart1
-    :param ttys_n: the serial port was chosen as hv console
-     """
-    vuart0_valid = []
-    vuart1_valid = ['ttyS0', 'ttyS1', 'ttyS2', 'ttyS3']
-    ttys_lines = board_cfg_lib.get_info(common.BOARD_INFO_FILE, "<TTYS_INFO>", "</TTYS_INFO>")
-    if ttys_lines:
-        vuart0_valid.clear()
-        for tty_line in ttys_lines:
-            tmp_dic = {}
-            #seri:/dev/ttySx type:mmio base:0x91526000 irq:4 [bdf:"00:18.0"]
-            #seri:/dev/ttySy type:portio base:0x2f8 irq:5
-            tty = tty_line.split('/')[2].split()[0]
-            ttys_irq = tty_line.split()[3].split(':')[1].strip()
-            ttys_type = tty_line.split()[1].split(':')[1].strip()
-            tmp_dic['irq'] = int(ttys_irq)
-            tmp_dic['type'] = ttys_type
-            NATIVE_TTYS_DIC[tty] = tmp_dic
-            vuart0_valid.append(tty)
-            if tty and tty in vuart1_valid:
-                vuart1_valid.remove(tty)
-
-    if not vuart1_valid:
-        common.print_yel("ttyS are fully used. ttyS0 is used for hv_console, ttyS1 is used for vuart1!", warn=True)
-        vuart1_valid = ['ttyS0', 'ttyS1', 'ttyS2', 'ttyS3']
-        if ttys_n in vuart1_valid:
-            vuart1_valid.remove(ttys_n)
-
-    return (vuart0_valid, vuart1_valid)
-
-
 def get_sos_vuart_settings(launch_flag=True):
     """
-    Get vuart setting from scenario setting
+    Get fixed vuart settings
     :return: vuart0/vuart1 setting dictionary
     """
-    global SOS_UART1_VALID_NUM
     err_dic = {}
-    vuart0_setting = {}
-    vuart1_setting = {}
-
-    (err_dic, ttys_n) = board_cfg_lib.parser_hv_console()
-    if err_dic:
-        if launch_flag:
-            SOS_UART1_VALID_NUM += "ttyS1"
-            return
-        return err_dic
-
-    if ttys_n:
-        (vuart0_valid, vuart1_valid) = get_valid_ttys_for_sos_vuart(ttys_n)
-
-        # VUART0 setting
-        if not launch_flag:
-            if ttys_n not in list(NATIVE_TTYS_DIC.keys()):
-                vuart0_setting['ttyS0'] = board_cfg_lib.alloc_irq()
-            else:
-                if int(NATIVE_TTYS_DIC[ttys_n]['irq']) >= 16:
-                    vuart0_setting[ttys_n] = board_cfg_lib.alloc_irq()
-                else:
-                    vuart0_setting[ttys_n] = NATIVE_TTYS_DIC[ttys_n]['irq']
-    else:
-        vuart1_valid = ['ttyS1']
-
-    if launch_flag:
-        SOS_UART1_VALID_NUM += vuart1_valid[0]
-        return
-
-    # VUART1 setting
-    # The IRQ of vUART1(COM2) might be hard-coded by SOS ACPI table(i.e. host ACPI),
-    # so we had better follow native COM2 IRQ assignment for vUART1 if COM2 is a legacy ttyS,
-    # otherwise function of vUART1 would be failed. If host COM2 does not exist or it is a PCI ttyS,
-    # then we could allocate a free IRQ for vUART1.
-
-    if 'ttyS1' in NATIVE_TTYS_DIC.keys() \
-        and NATIVE_TTYS_DIC['ttyS1']['type'] == "portio" \
-        and 'irq' in list(NATIVE_TTYS_DIC['ttyS1'].keys()) \
-        and NATIVE_TTYS_DIC['ttyS1']['irq'] < 16:
-        vuart1_setting['ttyS1'] = NATIVE_TTYS_DIC['ttyS1']['irq']
-    else:
-        vuart1_setting[vuart1_valid[0]] = board_cfg_lib.alloc_irq()
+    vuart0_setting = {'ttyS0': 4}
+    vuart1_setting = {'ttyS1': 3}
 
     return (err_dic, vuart0_setting, vuart1_setting)
