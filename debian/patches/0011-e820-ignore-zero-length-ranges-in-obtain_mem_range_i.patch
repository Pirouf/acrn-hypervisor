From: Helmut Buchsbaum <helmut.buchsbaum@opensource.tttech-industrial.com>
Date: Mon, 15 Jun 2020 11:18:57 +0200
Subject: e820: ignore zero length ranges in obtain_mem_range_info

On my Kontron COMe-mAL10 base board grub-2.02 obviously provides a bogus
E820 mmap entry (booting ACRN via multiboot2 protocol), which then causes
obtain_mem_range_info() to calculate a rather high hv_mem_range.mem_top,
which then is rounded to 0 for high64_max_ram in init_paging(),
which in turn makes the subsequent check fail and finally panics.

The EFI mmap deducted from grub debug info (debug=mmap) is as follows:

mmap/efi/mmap.c:66: EFI memory region 0x0-0x5000: 2
mmap/efi/mmap.c:66: EFI memory region 0x5000-0x3f000: 7
mmap/efi/mmap.c:66: EFI memory region 0x3f000-0x40000: 0
mmap/efi/mmap.c:66: EFI memory region 0x40000-0x9e000: 7
mmap/efi/mmap.c:66: EFI memory region 0x9e000-0x100000: 0
mmap/efi/mmap.c:66: EFI memory region 0x100000-0x1cf7000: 2
mmap/efi/mmap.c:66: EFI memory region 0x1cf7000-0x20000000: 7
mmap/efi/mmap.c:66: EFI memory region 0x22151000-0x22200000: 7
mmap/efi/mmap.c:66: EFI memory region 0x22200000-0x36200000: 2
mmap/efi/mmap.c:66: EFI memory region 0x36200000-0x3ed37000: 7
mmap/efi/mmap.c:66: EFI memory region 0x3ed37000-0x5b000000: 1
mmap/efi/mmap.c:66: EFI memory region 0x5b000000-0x5b020000: 4
mmap/efi/mmap.c:66: EFI memory region 0x5b020000-0x72a02000: 7
mmap/efi/mmap.c:66: EFI memory region 0x72a02000-0x72b77000: 1
mmap/efi/mmap.c:66: EFI memory region 0x72b77000-0x771eb000: 4
mmap/efi/mmap.c:66: EFI memory region 0x771eb000-0x7753d000: 7
mmap/efi/mmap.c:66: EFI memory region 0x7753d000-0x777eb000: 3
mmap/efi/mmap.c:66: EFI memory region 0x777eb000-0x79beb000: 0
mmap/efi/mmap.c:66: EFI memory region 0x79beb000-0x79c32000: 7
mmap/efi/mmap.c:66: EFI memory region 0x79c32000-0x79c5b000: 10
mmap/efi/mmap.c:66: EFI memory region 0x79c5b000-0x7a07a000: 6
mmap/efi/mmap.c:66: EFI memory region 0x7a07a000-0x7a0fa000: 5
mmap/efi/mmap.c:66: EFI memory region 0x7a0fa000-0x7a46d000: 4
mmap/efi/mmap.c:66: EFI memory region 0x7a46d000-0x7a46e000: 10
mmap/efi/mmap.c:66: EFI memory region 0x7a46e000-0x7a498000: 6
mmap/efi/mmap.c:66: EFI memory region 0x7a498000-0x7aae5000: 4
mmap/efi/mmap.c:66: EFI memory region 0x7aae5000-0x7aae7000: 6
mmap/efi/mmap.c:66: EFI memory region 0x7aae7000-0x7b000000: 4
mmap/efi/mmap.c:66: EFI memory region 0x100000000-0x180000000: 7
mmap/efi/mmap.c:66: EFI memory region 0x20000000-0x22151000: 0
mmap/efi/mmap.c:66: EFI memory region 0x7b000000-0x80000000: 0
mmap/efi/mmap.c:66: EFI memory region 0xd0000000-0xd1000000: 11
mmap/efi/mmap.c:66: EFI memory region 0xe0000000-0xf0000000: 11
mmap/efi/mmap.c:66: EFI memory region 0xfe042000-0xfe043000: 11
mmap/efi/mmap.c:66: EFI memory region 0xfe043000-0xfe044000: 11
mmap/efi/mmap.c:66: EFI memory region 0xfe044000-0xfe045000: 11
mmap/efi/mmap.c:66: EFI memory region 0xfe900000-0xfe903000: 11
mmap/efi/mmap.c:66: EFI memory region 0xfec00000-0xfec01000: 11
mmap/efi/mmap.c:66: EFI memory region 0xfed01000-0xfed02000: 11
mmap/efi/mmap.c:66: EFI memory region 0xfee00000-0xfee01000: 11
mmap/efi/mmap.c:66: EFI memory region 0xff000000-0x100000000: 11

Adding some debugging output in ACRN's sanitize_multiboot_info() to print
the provided E820 map as early as possible, grub derives the following
E820 map:

[0us][cpu=0][(null)][sev=3][seq=2]:mmap[0]: 0x0000000000000000 - 0x000000000003f000 (1)
[0us][cpu=0][(null)][sev=3][seq=3]:mmap[1]: 0x000000000003f000 - 0x0000000000040000 (2)
[0us][cpu=0][(null)][sev=3][seq=4]:mmap[2]: 0x0000000000040000 - 0x000000000009e000 (1)
[0us][cpu=0][(null)][sev=3][seq=5]:mmap[3]: 0x000000000009e000 - 0x0000000000100000 (2)
[0us][cpu=0][(null)][sev=3][seq=6]:mmap[4]: 0x0000000000100000 - 0x0000000020000000 (1)
[0us][cpu=0][(null)][sev=3][seq=7]:mmap[5]: 0x0000000020000000 - 0x0000000022151000 (2)
[0us][cpu=0][(null)][sev=3][seq=8]:mmap[6]: 0x0000000022151000 - 0x00000000777eb000 (1)
[0us][cpu=0][(null)][sev=3][seq=9]:mmap[7]: 0x00000000777eb000 - 0x0000000079beb000 (2)
[0us][cpu=0][(null)][sev=3][seq=10]:mmap[8]: 0x0000000079beb000 - 0x0000000079c32000 (1)
[0us][cpu=0][(null)][sev=3][seq=11]:mmap[9]: 0x0000000079c32000 - 0x0000000079c5b000 (4)
[0us][cpu=0][(null)][sev=3][seq=12]:mmap[10]: 0x0000000079c5b000 - 0x000000007a07a000 (2)
[0us][cpu=0][(null)][sev=3][seq=13]:mmap[11]: 0x000000007a07a000 - 0x000000007a0fa000 (20)
[0us][cpu=0][(null)][sev=3][seq=14]:mmap[12]: 0x000000007a0fa000 - 0x000000007a46d000 (1)
[0us][cpu=0][(null)][sev=3][seq=15]:mmap[13]: 0x000000007a46d000 - 0x000000007a46e000 (4)
[0us][cpu=0][(null)][sev=3][seq=16]:mmap[14]: 0xfffffffffffffff0 - 0x0000000000029ff0 (2) <-- this is the culprit!
[0us][cpu=0][(null)][sev=3][seq=17]:mmap[15]: 0x000000007a498000 - 0x000000007aae5000 (1)
[0us][cpu=0][(null)][sev=3][seq=18]:mmap[16]: 0x000000007aae5000 - 0x000000007aae7000 (2)
[0us][cpu=0][(null)][sev=3][seq=19]:mmap[17]: 0x000000007aae7000 - 0x000000007b000000 (1)
[0us][cpu=0][(null)][sev=3][seq=20]:mmap[18]: 0x000000007b000000 - 0x0000000080000000 (2)
[0us][cpu=0][(null)][sev=3][seq=21]:mmap[19]: 0x00000000d0000000 - 0x00000000d1000000 (2)
[0us][cpu=0][(null)][sev=3][seq=22]:mmap[20]: 0x00000000e0000000 - 0x00000000f0000000 (2)
[0us][cpu=0][(null)][sev=3][seq=23]:mmap[21]: 0x00000000fe042000 - 0x00000000fe045000 (2)
[0us][cpu=0][(null)][sev=3][seq=24]:mmap[22]: 0x00000000fe900000 - 0x00000000fe903000 (2)
[0us][cpu=0][(null)][sev=3][seq=25]:mmap[23]: 0x00000000fec00000 - 0x00000000fec01000 (2)
[0us][cpu=0][(null)][sev=3][seq=26]:mmap[24]: 0x00000000fed01000 - 0x00000000fed02000 (2)
[0us][cpu=0][(null)][sev=3][seq=27]:mmap[25]: 0x00000000fee00000 - 0x00000000fee01000 (2)
[0us][cpu=0][(null)][sev=3][seq=28]:mmap[26]: 0x00000000ff000000 - 0x0000000100000000 (2)
[0us][cpu=0][(null)][sev=3][seq=29]:mmap[27]: 0x0000000100000000 - 0x0000000180000000 (1)

Showing the bogus entry at mmap[14]. Since init_e820() already marks this
entry as 'out of range' by setting its length to 0, we simply ignore all
mmap entries with length 0 in obtain_mem_range_info() as a workaround.
Thus the bogus/out-of-range entries is ignored and ACRN starts as expected.

Remark: this seems a problem in grub, at least in grub-2.02, which has been
used in a Debian Buster system!

Signed-off-by: Helmut Buchsbaum <helmut.buchsbaum@opensource.tttech-industrial.com>
---
 hypervisor/arch/x86/e820.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/hypervisor/arch/x86/e820.c b/hypervisor/arch/x86/e820.c
index a835150..bcc449f 100644
--- a/hypervisor/arch/x86/e820.c
+++ b/hypervisor/arch/x86/e820.c
@@ -38,6 +38,10 @@ static void obtain_mem_range_info(void)
 	for (i = 0U; i < hv_e820_entries_nr; i++) {
 		entry = &hv_e820[i];
 
+		/* ignore zero length entries */
+		if (entry->length == 0UL)
+			continue;
+
 		if (hv_mem_range.mem_bottom > entry->baseaddr) {
 			hv_mem_range.mem_bottom = entry->baseaddr;
 		}
