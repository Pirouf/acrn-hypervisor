#!/usr/bin/make -f

include /usr/share/dpkg/pkg-info.mk
include /usr/share/dpkg/vendor.mk

# See debhelper(7) (uncomment to enable)
# output every command that modifies files on the build system.
#export DH_VERBOSE = 1

export MAKEFLAGS = --no-print-directory

# helper to compare strings
strequ=$(if $(subst x$1,,x$2)$(subst x$2,,x$1),,1)

bold := $(shell which tput >/dev/null 2>&1 && tput bold 2>/dev/null)
sgr0 := $(shell which tput >/dev/null 2>&1 && tput sgr0 2>/dev/null)

# special characters
empty :=
space := $(empty) $(empty)
comma := ,
# helper to create comma separated list from space separated list
commasep = $(subst $(space),$(comma)$(space),$1)

BOARDCFGDIR = debian/configs/boards
SCENARIOCFGDIR = debian/configs/scenarios

# uncomment this to use configs provided in source tree
#BOARDCFGDIR = misc/acrn-config/xmls/board-xmls
#SCENARIOCFGDIR = misc/acrn-config/xmls/config-xmls

# get version data for ACRN
include VERSION
ACRNVERSION := $(MAJOR_VERSION).$(MINOR_VERSION)

# get board/scenario name from config file name
bname = $(notdir $(basename $1))
# board config name -> board config file
bfile = $(abspath $(BOARDCFGDIR)/$1.xml)
# board/scenario config name -> scenario config file
sfile = $(abspath $(SCENARIOCFGDIR)/$1/$2.xml)

# honor environment variable ACRN_BOARDLIST
ifeq ($(ACRN_BOARDLIST),)
boardlist := $(sort $(call bname,$(wildcard $(BOARDCFGDIR)/*.xml)))
else
boardlist := $(sort $(ACRN_BOARDLIST))
endif
scenariolist :=

# create scenariolist for each board, filter launch configs
$(foreach b,$(boardlist),						\
	$(eval scenariolist_$b = 					\
		$(strip $(call bname,$(shell grep -L "uos_launcher"	\
			$(SCENARIOCFGDIR)/$b/*.xml))))			\
	$(if $(scenariolist_$b),,					\
		$(eval boardlist := $(sort $(strip			\
			$(filter-out $b,$(boardlist))			\
		)))							\
	)								\
	$(eval scenariolist := $(sort $(scenariolist) $(scenariolist_$b)))\
)

# for now build the debug versions
export RELEASE ?= 0

# set paths (see also paths.make)
export prefix = /usr
export bindir = $(prefix)/bin
export libdir = $(prefix)/lib/$(DEB_HOST_MULTIARCH)
export nonarchlibdir = $(prefix)/lib
export datadir = $(prefix)/share
export includedir = $(prefix)/include
export systemd_unitdir = /lib/systemd
export docdir = $(datadir)/doc

export BUILD_VERSION = "$(DEB_VERSION_UPSTREAM)"
export BUILD_TAG = "$(DEB_VENDOR)/$(DEB_VERSION)"

# set iASL compiler
ifeq ($(ASL_COMPILER),)
export ASL_COMPILER:=$(shell which iasl)
ifeq ($(ASL_COMPILER),)
$(error ASL_COMPILER missing)
endif
endif

# let make verbosity be controlled by DH_VERBOSE
ifeq ($(DH_VERBOSE),1)
  Q=
  echo-verbose = echo "   $@$(if $1,: $(bold)$1$(sgr0))"
  echo-silent = true
  devnull =
else
  Q=@
  echo-verbose = true
  echo-silent = echo "   $@$(if $1,: $(bold)$1$(sgr0))"
  devnull = >/dev/null
endif

### dh_installdeb ############################################################
debian/acrn-hypervisor.postinst: debian/acrn-hypervisor.postinst.in
	@$(call echo-verbose)
	@$(call echo-silent,CREATE $@)
	$(Q)sed -e 's/@acrnversion@/$(ACRNVERSION)/g' \
		-e 's%@acrndir@%$(libdir)/acrn%g' $< > $@

debian/acrn-hypervisor.postrm: debian/acrn-hypervisor.postrm.in
	@$(call echo-verbose)
	@$(call echo-silent,CREATE $@)
	$(Q)sed -e 's/@acrnversion@/$(ACRNVERSION)/g' $< > $@

debian/acrn-hypervisor.prerm: debian/acrn-hypervisor.prerm.in
	@$(call echo-verbose)
	@$(call echo-silent,CREATE $@)
	$(Q)sed -e 's/@acrnversion@/$(ACRNVERSION)/g' $< > $@

override_dh_installdeb: debian/acrn-hypervisor.postinst debian/acrn-hypervisor.postrm debian/acrn-hypervisor.prerm
	$(Q)dh_installdeb

### dh_installdebconf-arch ###################################################
debian/acrn-hypervisor.templates: debian/acrn-hypervisor.templates.in
	@$(call echo-verbose)
	@$(call echo-silent,CREATE $@)
	$(Q)sed -e 's/@boardlist@/$(call commasep,$(boardlist))/g' $< > $@

override_dh_installdebconf-arch: debian/acrn-hypervisor.templates
	$(Q)dh_installdebconf -a

### build-arch ###############################################################
override_dh_auto_build-arch: O=build
override_dh_auto_build-arch:
	@$(call echo-verbose)
	$(Q)set -e; $(foreach b,$(boardlist),$(foreach s,$(scenariolist_$b),\
		$(call echo-silent,BUILD hypervisor for $b:$s);		\
		$(MAKE) O=$(O)/$b/$s					\
			BOARD=$(call bfile,$b)				\
			SCENARIO=$(call sfile,$b,$s)			\
			hypervisor $(devnull);				\
	))
	@$(call echo-silent,BUILD devicemodel & tools)
	$(Q)$(MAKE) O=$(O)/common devicemodel $(devnull)

### build-indep ##############################################################
ifeq ($(EXTRA_VERSION),)
ACRN_DOC_VERSION := $(DEB_VERSION_UPSTREAM)
else
ACRN_DOC_VERSION := latest
endif

build/documentation/html/index.html: debian/acrn-doc-index-html.in
	@$(call echo-verbose)
	@$(call echo-silent,BUILD documentation)
	$(Q)mkdir -p $(@D)
	$(Q)sed -e 's/@acrnversion@/$(ACRN_DOC_VERSION)/g' $< > $@

override_dh_auto_build-indep: build/documentation/html/index.html
	@:

### binary-arch ##############################################################
override_dh_auto_install-arch: O=build
override_dh_auto_install-arch: DESTDIR=$(abspath debian/tmp)
override_dh_auto_install-arch:
	@$(call echo-verbose)
	$(Q)set -e;$(foreach b,$(boardlist),$(foreach s,$(scenariolist_$b),\
		$(call echo-silent,INSTALL hypervisor for $b:$s); 	\
		$(MAKE) O=$(O)/$b/$s					\
			BOARD=$(call bfile,$b)				\
			SCENARIO=$(call sfile,$b,$s)			\
			DESTDIR=$(DESTDIR)				\
			hypervisor-install $(devnull);			\
			cp $(O)/$b/$s/hypervisor/.config		\
				$(DESTDIR)$(libdir)/acrn/acrn.$b.$s.config;\
			cp $(O)/$b/$s/hypervisor/acrn.map		\
				$(DESTDIR)$(libdir)/acrn/acrn.$b.$s.map;\
	))
	@:
	@# cleanup hypervisor binaries
	$(Q)chmod 644 $(DESTDIR)$(libdir)/acrn/*.out
	$(Q)chmod 644 $(DESTDIR)$(libdir)/acrn/*.bin
	@:
	@# install devicemodel & tools
	@$(call echo-silent,INSTALL devicemodel & tools)
	$(Q)$(MAKE) O=$(O)/common DESTDIR=$(DESTDIR) devicemodel-install $(devnull)
	$(Q)$(MAKE) O=$(O)/common DESTDIR=$(DESTDIR) tools-install $(devnull)
	@:
	@# move/adapt network configs as examples only
	$(Q)mkdir -p $(DESTDIR)$(docdir)/acrnd/examples
	$(Q)cp $(DESTDIR)$(systemd_unitdir)/network/*				\
		$(DESTDIR)$(docdir)/acrnd/examples
	$(Q)sed -i 's/acrn_tap\* //g'						\
		$(DESTDIR)$(docdir)/acrnd/examples/50-acrn.network
	@:
	@# adapt systemd services
	$(Q)sed -i '/weston.service/d' $(DESTDIR)$(systemd_unitdir)/system/acrnd.service
	@:
	@# move devicemodel samples
	$(Q)mkdir -p $(DESTDIR)$(docdir)/acrn-devicemodel
	$(Q)mv $(DESTDIR)$(datadir)/acrn/samples				\
		$(DESTDIR)$(docdir)/acrn-devicemodel
	@:
	@# adapt systemd services for tools (available in DEBUG build only)
	$(if $(call strequ,${RELEASE},0),					\
		$(Q)sed -i -e '/telemd.socket/d' -e '/prepare.service/d'	\
			$(DESTDIR)$(systemd_unitdir)/system/acrnprobe.service;	\
		sed -i '/telemd/d'						\
			$(DESTDIR)$(systemd_unitdir)/system/usercrash.service;	\
	)

### binary-indep #############################################################
override_dh_auto_install-indep: O=build
override_dh_auto_install-indep: DESTDIR=$(abspath debian/tmp)
override_dh_auto_install-indep:
	@$(call echo-verbose)
	@$(call echo-silent,INSTALL documentation)
	$(Q)mkdir -p ${DESTDIR}$(docdir)/acrn/
	$(Q)cp -a $(O)/documentation/html ${DESTDIR}$(docdir)/acrn/

### dh_missing ###############################################################
# there is no libtelemetry used
override_dh_missing:
	$(Q)dh_missing --fail-missing -Xusr/share/defaults/telemetrics/acrnprobe.xml

### dh_strip #################################################################
# only strip release variant binaries
override_dh_strip-arch: DESTDIR=$(abspath debian/tmp)
override_dh_strip-arch:
	$(Q)dh_strip -X.out -X.bin
	$(Q)strip --strip-debug							\
		--remove-section=.comment					\
		--remove-section=.note						\
		--enable-deterministic-archiv					\
		$(DESTDIR)$(libdir)/libacrn-mngr.a;

### clean ####################################################################
override_dh_auto_clean:
	@echo "Building ACRN $(ACRNVERSION) for boards: $(bold)$(call commasep,$(boardlist))$(sgr0)"
	@echo "The scenarios used are:"
	@$(foreach b,$(boardlist),echo "  $b: $(bold)$(call commasep,$(scenariolist_$b))$(sgr0)";)
	$(Q)rm -rf build
	$(Q)rm -f debian/acrn-hypervisor.postinst debian/acrn-hypervisor.postrm debian/acrn-hypervisor.prerm
	$(Q)rm -rf $$(find . -type d -name __pycache__)

### others ###################################################################
%:
	$(Q)dh $@

